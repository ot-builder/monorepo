/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---
* import { RangeDecl } from "./datatypes";
* ---
* start       := __ rgs=Ranges __
*                 .ranges = RangeDecl[] { return this.rgs.ranges }
* Ranges      := car=Range Separator cdr=Ranges
*                 .ranges = RangeDecl[] { return [this.car.codeRange, ...this.cdr.ranges] }
*              | range=Range
*                 .ranges = RangeDecl[] { return [this.range.codeRange] }
* Range       := _ exclude='-'? _ start=CodePoint _ '..' _ end=CodePoint _
*                 .codeRange = RangeDecl {
*                     return {
*                         isExclusion: !!this.exclude,
*                         start: this.start.value,
*                         end:this.end.value
*                     }
*                 }
*              | _ exclude='-'? _ at=CodePoint _
*                 .codeRange = RangeDecl {
*                     return { isExclusion: !!this.exclude, start: this.at.value, end:this.at.value }
*                 }
* CodePoint   := Prefix? literal='[0-9A-Fa-f]+'
*                 .value = number { return parseInt(this.literal, 16) }
* Prefix      := 'U\+' | '0x' | '0X'
* Separator   := _ '[,;]' __
*              | ___
* _           := '[ \t]*'
* __          := '(?:[ \t]|(?:#[^\r\n]*)?[\r\n])*'
* ___         := _ '(?:#[^\r\n]*)?[\r\n]' __
*/

import { RangeDecl } from "./datatypes";

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start,
    Ranges_1,
    Ranges_2,
    Range_1,
    Range_2,
    CodePoint,
    Prefix_1,
    Prefix_2,
    Prefix_3,
    Separator_1,
    Separator_2,
    _,
    __,
    ___,
}
export class start {
    public kind: ASTKinds.start = ASTKinds.start;
    public rgs: Ranges;
    public ranges: RangeDecl[];
    constructor(rgs: Ranges){
        this.rgs = rgs;
        this.ranges = ((): RangeDecl[] => {
        return this.rgs.ranges
        })();
    }
}
export type Ranges = Ranges_1 | Ranges_2;
export class Ranges_1 {
    public kind: ASTKinds.Ranges_1 = ASTKinds.Ranges_1;
    public car: Range;
    public cdr: Ranges;
    public ranges: RangeDecl[];
    constructor(car: Range, cdr: Ranges){
        this.car = car;
        this.cdr = cdr;
        this.ranges = ((): RangeDecl[] => {
        return [this.car.codeRange, ...this.cdr.ranges]
        })();
    }
}
export class Ranges_2 {
    public kind: ASTKinds.Ranges_2 = ASTKinds.Ranges_2;
    public range: Range;
    public ranges: RangeDecl[];
    constructor(range: Range){
        this.range = range;
        this.ranges = ((): RangeDecl[] => {
        return [this.range.codeRange]
        })();
    }
}
export type Range = Range_1 | Range_2;
export class Range_1 {
    public kind: ASTKinds.Range_1 = ASTKinds.Range_1;
    public exclude: Nullable<string>;
    public start: CodePoint;
    public end: CodePoint;
    public codeRange: RangeDecl;
    constructor(exclude: Nullable<string>, start: CodePoint, end: CodePoint){
        this.exclude = exclude;
        this.start = start;
        this.end = end;
        this.codeRange = ((): RangeDecl => {
        return {
                        isExclusion: !!this.exclude,
                        start: this.start.value,
                        end:this.end.value
                    }
        })();
    }
}
export class Range_2 {
    public kind: ASTKinds.Range_2 = ASTKinds.Range_2;
    public exclude: Nullable<string>;
    public at: CodePoint;
    public codeRange: RangeDecl;
    constructor(exclude: Nullable<string>, at: CodePoint){
        this.exclude = exclude;
        this.at = at;
        this.codeRange = ((): RangeDecl => {
        return { isExclusion: !!this.exclude, start: this.at.value, end:this.at.value }
        })();
    }
}
export class CodePoint {
    public kind: ASTKinds.CodePoint = ASTKinds.CodePoint;
    public literal: string;
    public value: number;
    constructor(literal: string){
        this.literal = literal;
        this.value = ((): number => {
        return parseInt(this.literal, 16)
        })();
    }
}
export type Prefix = Prefix_1 | Prefix_2 | Prefix_3;
export type Prefix_1 = string;
export type Prefix_2 = string;
export type Prefix_3 = string;
export type Separator = Separator_1 | Separator_2;
export interface Separator_1 {
    kind: ASTKinds.Separator_1;
}
export type Separator_2 = ___;
export type _ = string;
export type __ = string;
export interface ___ {
    kind: ASTKinds.___;
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$start$memo.clear();
        this.$scope$Ranges$memo.clear();
        this.$scope$Range$memo.clear();
        this.$scope$CodePoint$memo.clear();
        this.$scope$Prefix$memo.clear();
        this.$scope$Separator$memo.clear();
        this.$scope$_$memo.clear();
        this.$scope$__$memo.clear();
        this.$scope$___$memo.clear();
    }
    protected $scope$start$memo: Map<number, [Nullable<start>, PosInfo]> = new Map();
    protected $scope$Ranges$memo: Map<number, [Nullable<Ranges>, PosInfo]> = new Map();
    protected $scope$Range$memo: Map<number, [Nullable<Range>, PosInfo]> = new Map();
    protected $scope$CodePoint$memo: Map<number, [Nullable<CodePoint>, PosInfo]> = new Map();
    protected $scope$Prefix$memo: Map<number, [Nullable<Prefix>, PosInfo]> = new Map();
    protected $scope$Separator$memo: Map<number, [Nullable<Separator>, PosInfo]> = new Map();
    protected $scope$_$memo: Map<number, [Nullable<_>, PosInfo]> = new Map();
    protected $scope$__$memo: Map<number, [Nullable<__>, PosInfo]> = new Map();
    protected $scope$___$memo: Map<number, [Nullable<___>, PosInfo]> = new Map();
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.memoise(
            () => {
                return this.run<start>($$dpth,
                    () => {
                        let $scope$rgs: Nullable<Ranges>;
                        let $$res: Nullable<start> = null;
                        if (true
                            && this.match__($$dpth + 1, $$cr) !== null
                            && ($scope$rgs = this.matchRanges($$dpth + 1, $$cr)) !== null
                            && this.match__($$dpth + 1, $$cr) !== null
                        ) {
                            $$res = new start($scope$rgs);
                        }
                        return $$res;
                    });
            },
            this.$scope$start$memo,
        );
    }
    public matchRanges($$dpth: number, $$cr?: ErrorTracker): Nullable<Ranges> {
        return this.memoise(
            () => {
                return this.choice<Ranges>([
                    () => this.matchRanges_1($$dpth + 1, $$cr),
                    () => this.matchRanges_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$Ranges$memo,
        );
    }
    public matchRanges_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Ranges_1> {
        return this.run<Ranges_1>($$dpth,
            () => {
                let $scope$car: Nullable<Range>;
                let $scope$cdr: Nullable<Ranges>;
                let $$res: Nullable<Ranges_1> = null;
                if (true
                    && ($scope$car = this.matchRange($$dpth + 1, $$cr)) !== null
                    && this.matchSeparator($$dpth + 1, $$cr) !== null
                    && ($scope$cdr = this.matchRanges($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Ranges_1($scope$car, $scope$cdr);
                }
                return $$res;
            });
    }
    public matchRanges_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Ranges_2> {
        return this.run<Ranges_2>($$dpth,
            () => {
                let $scope$range: Nullable<Range>;
                let $$res: Nullable<Ranges_2> = null;
                if (true
                    && ($scope$range = this.matchRange($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Ranges_2($scope$range);
                }
                return $$res;
            });
    }
    public matchRange($$dpth: number, $$cr?: ErrorTracker): Nullable<Range> {
        return this.memoise(
            () => {
                return this.choice<Range>([
                    () => this.matchRange_1($$dpth + 1, $$cr),
                    () => this.matchRange_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$Range$memo,
        );
    }
    public matchRange_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Range_1> {
        return this.run<Range_1>($$dpth,
            () => {
                let $scope$exclude: Nullable<Nullable<string>>;
                let $scope$start: Nullable<CodePoint>;
                let $scope$end: Nullable<CodePoint>;
                let $$res: Nullable<Range_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$exclude = this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$start = this.matchCodePoint($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:..)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$end = this.matchCodePoint($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new Range_1($scope$exclude, $scope$start, $scope$end);
                }
                return $$res;
            });
    }
    public matchRange_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Range_2> {
        return this.run<Range_2>($$dpth,
            () => {
                let $scope$exclude: Nullable<Nullable<string>>;
                let $scope$at: Nullable<CodePoint>;
                let $$res: Nullable<Range_2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$exclude = this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$at = this.matchCodePoint($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new Range_2($scope$exclude, $scope$at);
                }
                return $$res;
            });
    }
    public matchCodePoint($$dpth: number, $$cr?: ErrorTracker): Nullable<CodePoint> {
        return this.memoise(
            () => {
                return this.run<CodePoint>($$dpth,
                    () => {
                        let $scope$literal: Nullable<string>;
                        let $$res: Nullable<CodePoint> = null;
                        if (true
                            && ((this.matchPrefix($$dpth + 1, $$cr)) || true)
                            && ($scope$literal = this.regexAccept(String.raw`(?:[0-9A-Fa-f]+)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new CodePoint($scope$literal);
                        }
                        return $$res;
                    });
            },
            this.$scope$CodePoint$memo,
        );
    }
    public matchPrefix($$dpth: number, $$cr?: ErrorTracker): Nullable<Prefix> {
        return this.memoise(
            () => {
                return this.choice<Prefix>([
                    () => this.matchPrefix_1($$dpth + 1, $$cr),
                    () => this.matchPrefix_2($$dpth + 1, $$cr),
                    () => this.matchPrefix_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$Prefix$memo,
        );
    }
    public matchPrefix_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Prefix_1> {
        return this.regexAccept(String.raw`(?:U\+)`, $$dpth + 1, $$cr);
    }
    public matchPrefix_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Prefix_2> {
        return this.regexAccept(String.raw`(?:0x)`, $$dpth + 1, $$cr);
    }
    public matchPrefix_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Prefix_3> {
        return this.regexAccept(String.raw`(?:0X)`, $$dpth + 1, $$cr);
    }
    public matchSeparator($$dpth: number, $$cr?: ErrorTracker): Nullable<Separator> {
        return this.memoise(
            () => {
                return this.choice<Separator>([
                    () => this.matchSeparator_1($$dpth + 1, $$cr),
                    () => this.matchSeparator_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$Separator$memo,
        );
    }
    public matchSeparator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Separator_1> {
        return this.run<Separator_1>($$dpth,
            () => {
                let $$res: Nullable<Separator_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[,;])`, $$dpth + 1, $$cr) !== null
                    && this.match__($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Separator_1, };
                }
                return $$res;
            });
    }
    public matchSeparator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Separator_2> {
        return this.match___($$dpth + 1, $$cr);
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:[ \t]*)`, $$dpth + 1, $$cr);
            },
            this.$scope$_$memo,
        );
    }
    public match__($$dpth: number, $$cr?: ErrorTracker): Nullable<__> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:(?:[ \t]|(?:#[^\r\n]*)?[\r\n])*)`, $$dpth + 1, $$cr);
            },
            this.$scope$__$memo,
        );
    }
    public match___($$dpth: number, $$cr?: ErrorTracker): Nullable<___> {
        return this.memoise(
            () => {
                return this.run<___>($$dpth,
                    () => {
                        let $$res: Nullable<___> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:(?:#[^\r\n]*)?[\r\n])`, $$dpth + 1, $$cr) !== null
                            && this.match__($$dpth + 1, $$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.___, };
                        }
                        return $$res;
                    });
            },
            this.$scope$___$memo,
        );
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}