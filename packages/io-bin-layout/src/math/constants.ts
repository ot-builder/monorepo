import { NullablePtr16 } from "@ot-builder/bin-composite-types";
import { Read, Write } from "@ot-builder/bin-util";
import { Math as OtMath } from "@ot-builder/ot-layout";
import { OtVar } from "@ot-builder/variance";

import { MathValueRecord } from "../shared/math-value-record";

export const MathConstants = {
    ...Read<OtMath.Constants>(bp => {
        const x = new OtMath.Constants();
        x.scriptPercentScaleDown = bp.int16();
        x.scriptScriptPercentScaleDown = bp.int16();
        x.delimitedSubFormulaMinHeight = bp.uint16();
        x.displayOperatorMinHeight = bp.uint16();
        x.mathLeading = bp.next(MathValueRecord);
        x.axisHeight = bp.next(MathValueRecord);
        x.accentBaseHeight = bp.next(MathValueRecord);
        x.flattenedAccentBaseHeight = bp.next(MathValueRecord);
        x.subscriptShiftDown = bp.next(MathValueRecord);
        x.subscriptTopMax = bp.next(MathValueRecord);
        x.subscriptBaselineDropMin = bp.next(MathValueRecord);
        x.superscriptShiftUp = bp.next(MathValueRecord);
        x.superscriptShiftUpCramped = bp.next(MathValueRecord);
        x.superscriptBottomMin = bp.next(MathValueRecord);
        x.superscriptBaselineDropMax = bp.next(MathValueRecord);
        x.subSuperscriptGapMin = bp.next(MathValueRecord);
        x.superscriptBottomMaxWithSubscript = bp.next(MathValueRecord);
        x.spaceAfterScript = bp.next(MathValueRecord);
        x.upperLimitGapMin = bp.next(MathValueRecord);
        x.upperLimitBaselineRiseMin = bp.next(MathValueRecord);
        x.lowerLimitGapMin = bp.next(MathValueRecord);
        x.lowerLimitBaselineDropMin = bp.next(MathValueRecord);
        x.stackTopShiftUp = bp.next(MathValueRecord);
        x.stackTopDisplayStyleShiftUp = bp.next(MathValueRecord);
        x.stackBottomShiftDown = bp.next(MathValueRecord);
        x.stackBottomDisplayStyleShiftDown = bp.next(MathValueRecord);
        x.stackGapMin = bp.next(MathValueRecord);
        x.stackDisplayStyleGapMin = bp.next(MathValueRecord);
        x.stretchStackTopShiftUp = bp.next(MathValueRecord);
        x.stretchStackBottomShiftDown = bp.next(MathValueRecord);
        x.stretchStackGapAboveMin = bp.next(MathValueRecord);
        x.stretchStackGapBelowMin = bp.next(MathValueRecord);
        x.fractionNumeratorShiftUp = bp.next(MathValueRecord);
        x.fractionNumeratorDisplayStyleShiftUp = bp.next(MathValueRecord);
        x.fractionDenominatorShiftDown = bp.next(MathValueRecord);
        x.fractionDenominatorDisplayStyleShiftDown = bp.next(MathValueRecord);
        x.fractionNumeratorGapMin = bp.next(MathValueRecord);
        x.fractionNumDisplayStyleGapMin = bp.next(MathValueRecord);
        x.fractionRuleThickness = bp.next(MathValueRecord);
        x.fractionDenominatorGapMin = bp.next(MathValueRecord);
        x.fractionDenomDisplayStyleGapMin = bp.next(MathValueRecord);
        x.skewedFractionHorizontalGap = bp.next(MathValueRecord);
        x.skewedFractionVerticalGap = bp.next(MathValueRecord);
        x.overbarVerticalGap = bp.next(MathValueRecord);
        x.overbarRuleThickness = bp.next(MathValueRecord);
        x.overbarExtraAscender = bp.next(MathValueRecord);
        x.underbarVerticalGap = bp.next(MathValueRecord);
        x.underbarRuleThickness = bp.next(MathValueRecord);
        x.underbarExtraDescender = bp.next(MathValueRecord);
        x.radicalVerticalGap = bp.next(MathValueRecord);
        x.radicalDisplayStyleVerticalGap = bp.next(MathValueRecord);
        x.radicalRuleThickness = bp.next(MathValueRecord);
        x.radicalExtraAscender = bp.next(MathValueRecord);
        x.radicalKernBeforeDegree = bp.next(MathValueRecord);
        x.radicalKernAfterDegree = bp.next(MathValueRecord);
        x.radicalDegreeBottomRaisePercent = bp.int16();
        return x;
    }),
    ...Write((fr, x: OtMath.Constants) => {
        fr.int16(x.scriptPercentScaleDown);
        fr.int16(x.scriptScriptPercentScaleDown);
        fr.uint16(OtVar.Ops.originOf(x.delimitedSubFormulaMinHeight));
        fr.uint16(OtVar.Ops.originOf(x.displayOperatorMinHeight));
        fr.push(MathValueRecord, x.mathLeading);
        fr.push(MathValueRecord, x.axisHeight);
        fr.push(MathValueRecord, x.accentBaseHeight);
        fr.push(MathValueRecord, x.flattenedAccentBaseHeight);
        fr.push(MathValueRecord, x.subscriptShiftDown);
        fr.push(MathValueRecord, x.subscriptTopMax);
        fr.push(MathValueRecord, x.subscriptBaselineDropMin);
        fr.push(MathValueRecord, x.superscriptShiftUp);
        fr.push(MathValueRecord, x.superscriptShiftUpCramped);
        fr.push(MathValueRecord, x.superscriptBottomMin);
        fr.push(MathValueRecord, x.superscriptBaselineDropMax);
        fr.push(MathValueRecord, x.subSuperscriptGapMin);
        fr.push(MathValueRecord, x.superscriptBottomMaxWithSubscript);
        fr.push(MathValueRecord, x.spaceAfterScript);
        fr.push(MathValueRecord, x.upperLimitGapMin);
        fr.push(MathValueRecord, x.upperLimitBaselineRiseMin);
        fr.push(MathValueRecord, x.lowerLimitGapMin);
        fr.push(MathValueRecord, x.lowerLimitBaselineDropMin);
        fr.push(MathValueRecord, x.stackTopShiftUp);
        fr.push(MathValueRecord, x.stackTopDisplayStyleShiftUp);
        fr.push(MathValueRecord, x.stackBottomShiftDown);
        fr.push(MathValueRecord, x.stackBottomDisplayStyleShiftDown);
        fr.push(MathValueRecord, x.stackGapMin);
        fr.push(MathValueRecord, x.stackDisplayStyleGapMin);
        fr.push(MathValueRecord, x.stretchStackTopShiftUp);
        fr.push(MathValueRecord, x.stretchStackBottomShiftDown);
        fr.push(MathValueRecord, x.stretchStackGapAboveMin);
        fr.push(MathValueRecord, x.stretchStackGapBelowMin);
        fr.push(MathValueRecord, x.fractionNumeratorShiftUp);
        fr.push(MathValueRecord, x.fractionNumeratorDisplayStyleShiftUp);
        fr.push(MathValueRecord, x.fractionDenominatorShiftDown);
        fr.push(MathValueRecord, x.fractionDenominatorDisplayStyleShiftDown);
        fr.push(MathValueRecord, x.fractionNumeratorGapMin);
        fr.push(MathValueRecord, x.fractionNumDisplayStyleGapMin);
        fr.push(MathValueRecord, x.fractionRuleThickness);
        fr.push(MathValueRecord, x.fractionDenominatorGapMin);
        fr.push(MathValueRecord, x.fractionDenomDisplayStyleGapMin);
        fr.push(MathValueRecord, x.skewedFractionHorizontalGap);
        fr.push(MathValueRecord, x.skewedFractionVerticalGap);
        fr.push(MathValueRecord, x.overbarVerticalGap);
        fr.push(MathValueRecord, x.overbarRuleThickness);
        fr.push(MathValueRecord, x.overbarExtraAscender);
        fr.push(MathValueRecord, x.underbarVerticalGap);
        fr.push(MathValueRecord, x.underbarRuleThickness);
        fr.push(MathValueRecord, x.underbarExtraDescender);
        fr.push(MathValueRecord, x.radicalVerticalGap);
        fr.push(MathValueRecord, x.radicalDisplayStyleVerticalGap);
        fr.push(MathValueRecord, x.radicalRuleThickness);
        fr.push(MathValueRecord, x.radicalExtraAscender);
        fr.push(MathValueRecord, x.radicalKernBeforeDegree);
        fr.push(MathValueRecord, x.radicalKernAfterDegree);
        fr.int16(x.radicalDegreeBottomRaisePercent);
    })
};
export const Ptr16MathConstantsNullable = NullablePtr16(MathConstants);
